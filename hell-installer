#!/usr/bin/env zsh

__HELLSCRIPTS_INSTALLER_EPIC_FAILED=false
__HELL_OLDPWD=$(pwd)

function __HELLSCRIPTS_INJECT_FUNS {
	function __DISPLAY_HELLSCRIPTS_LOGS {
		cat $__HELLSCRIPTS_ATTR[LOGFILE]
	}

	function __HELLSCRIPTS_WRITE_LOGS {
		if [[ $# -eq 0 ]]
		then
			__HELL_LOG_FILE="$__HELLSCRIPTS_ATTR[LOGFILE]"
		else
			__HELL_LOG_FILE="$1";
		fi

		[[ $# -gt 1 ]] &&
			return 7

		[[ ! -f "$__HELL_LOG_FILE" ]] &&
			return 2

		read l
		[[ $l ]] &&
			echo -e $(date) >> "$__HELL_LOG_FILE" &&
			2>&1 echo -ne $l >> "$__HELL_LOG_FILE" &&
			while read l
			do
				echo -ne $l >> "$__HELL_LOG_FILE" 2>&1
			done

		echo -e "\n" >> "$__HELL_LOG_FILE"
		unset __HELL_LOG_FILE
	}

	function __HELLSCRIPTS_INJECT_LOGGER {
		type HelLogger &> /dev/null && unset -f -- HelLogger
		type HellErrorLogger &> /dev/null && unset -f -- HellErrorLogger

		function HelLogger {
			[[ $__HELLSCRIPTS_ATTR[ENABLE_HELLSCRIPTS_LOGGING] ]] &&
				$(echo -e "[HellScripts] ${@}" 2>&1 | __HELLSCRIPTS_WRITE_LOGS)
		}

		function HellErrorLogger {
			[[ $__HELLSCRIPTS_ATTR[ENABLE_HELLSCRIPTS_LOGGING] ]] &&
				$(>&2 echo -e "[HellScripts ERROR] ${@}" 2>&1 | __HELLSCRIPTS_WRITE_LOGS)
		}
	}

	function __HELLSCRIPTS_INJECT_PHONY_LOGGER {
		type HelLogger &> /dev/null && unset -f -- HelLogger
		type HellErrorLogger &> /dev/null && unset -f -- HellErrorLogger

		function HelLogger {}

		function HellErrorLogger {}
	}

	function __HELLSCRIPTS_FETCH_PATHES {
		__HELLSCRIPTS_DIRS=$(find $__HELLSCRIPTS_ATTR[REPO_DIR] -type d -not -path "$__HELLSCRIPTS_ATTR[REPO_DIR]/.git*")
		echo "${__HELLSCRIPTS_DIRS//[$'\t\r\n']/:}:$HOME/.emacs.d/bin"
		unset __HELLSCRIPTS_DIRS
	}

	function __HELL_IS_COMMAND_IMPORTED {
		[[ $# -eq 0 ]] &&
			HellErrorLogger "LOL" &&
			return 7

		for cmd in $@
		do
			[[ ! command -v "$cmd" &> /dev/null ]] &&
				return false
		done

		true
	}

	function HellRemoteExecution {
		[[ $# -eq 0 ]] &&
			HellErrorLogger "What should I hellah remote execute? I don't like riddles." &&
			return 7

		(bash <(curl -Ls "$1") "${@: 2}"   ||
		bash <(wget -qO- "$1") "${@: 2}"  ||
		bash <(lynx -dump "$1") "${@: 2}" ||
			HellErrorLogger "Failed to run command!\nRemote URI: $1\nArguments: ${@: 2}") |
		__HELLSCRIPTS_WRITE_LOGS
	}
}

function HELLSCRIPTS_RUN_INSTALLER {
	__HELLSCRIPTS_INJECT_FUNS

	if $__HELLSCRIPTS_ATTR[ENABLE_HELLSCRIPTS_LOGGING]
	then
		__HELLSCRIPTS_INJECT_LOGGER
	else
		__HELLSCRIPTS_INJECT_PHONY_LOGGER
	fi

	[[ ! __HELL_IS_COMMAND_IMPORTED "git" ]] &&
		HelLogger "Installing git..." &&
		HellRemoteExecution "$__HELLSCRIPTS_ATTR[REMOTE_GETPKG_SCRIPT_URI]" "git"

	[[ ! __HELL_IS_COMMAND_IMPORTED "zsh" ]] &&
		HelLogger "Installing zsh..." &&
		HellRemoteExecution "$__HELLSCRIPTS_ATTR[REMOTE_GETPKG_SCRIPT_URI]" "zsh" && chsh -s /bin/zsh

        [[ ! $(ps -p $$ | grep zsh) ]] && exec zsh

	[[ ! __HELL_IS_COMMAND_IMPORTED "curl" ]] && 
		HelLogger "Installing curl..." &&
		HellRemoteExecution "$__HELLSCRIPTS_ATTR[REMOTE_GETPKG_SCRIPT_URI]" "curl"

	[[ ! -d "$__HELLSCRIPTS_ATTR[REPO_DIR]" ]] &&
		HelLogger "Importing HellScripts core..." &&
		cd -P ~ &&
		(git clone "$__HELLSCRIPTS_ATTR[MY_REMOTE_REPO_URI]" `basename "$__HELLSCRIPTS_ATTR[REPO_DIR]"` --recursive |
		__HELLSCRIPTS_WRITE_LOGS) ||
		__HELLSCRIPTS_INSTALLER_EPIC_FAILED=true;

	__HELL_NEW_PATH_ELM=$(eval __HELLSCRIPTS_FETCH_PATHES)
	PATH="$PATH:$__HELL_NEW_PATH_ELM"
	HelLogger "Updated PATH with values: $__HELL_NEW_PATH_ELM"
	unset __HELL_NEW_PATH_ELM

	if $__HELLSCRIPTS_INSTALLER_EPIC_FAILED
	then
		HellErrorLogger "Well tried, wkwkwk.\nAre you aware this is just a gitmodule which I made public, but is only an artefact from a several dozens of thousands lines of code project?\nI love u qt."
	else
		. .propagate_hell_zshmess
	fi

	unset __HELLSCRIPTS_INSTALLER_EPIC_FAILED
}
