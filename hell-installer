#!/usr/bin/env zsh

set -a

__HELLSCRIPTS_INSTALLER_EPIC_FAILED=false
__HELLSCRIPTS_OLDPWD="$(pwd)"
__HELLSCRIPTS_FOLDER="$HOME/.hellscripts"
__HELLSCRIPTS_REPO_PATH="$__HELLSCRIPTS_FOLDER/MyHellScripts"
__HELLSCRIPTS_HELLMAP_FILEPATH="$__HELLSCRIPTS_FOLDER/.zsh_hellmap"
__HELLSCRIPTS_REINSTALLING=false
__HELLSCRIPTS_LOG_FILE="${__HELLSCRIPTS_LOG_FILE:-`mktemp`}"
__HELLSCRIPTS_ZSHRC_FILEPATH="$HOME/.zshrc"

function __HELLSCRIPTS_INJECT_FUNS {
    function __HELLSCRIPTS_CREATE_ROOT_DIRECTORY {
        if [[ ! -d "$__HELLSCRIPTS_FOLDER" ]]
        then
            mkdir "$__HELLSCRIPTS_FOLDER" &> /dev/null
        fi
    }

    function __HELLSCRIPTS_SET_AT_EXIT_TRAP {
        if [[ $# -eq 0 ]]
        then
            return 1
        fi

        trap "$@" EXIT SIGKILL SIGINT
    }

    __HELLSCRIPTS_SET_AT_EXIT_TRAP "unset __HELLSCRIPTS_REINSTALLING && set +a &> /dev/null"

    function __HELLSCRIPTS_SETUP_LOGGER {
        if [[ $# -eq 0 ]]; then return; fi

        echo "[HellScripts Amnesic Setup Logger]" "$@"
    }

    function __HELLSCRIPTS_SET_ZSH_AS_DEFAULT_SHELL {
        if [[ ! $(readlink /proc/$$/exe &> /dev/null | grep "zsh") ]]
        then
            chsh -s /bin/zsh
        fi
    }

    function __HELLSCRIPTS_CLONE_REPO {
        cd -P ~  &&
        (
            2>&1 git clone "$__HELLSCRIPTS_ATTR[MY_REMOTE_REPO_URI]" "$__HELLSCRIPTS_REPO_PATH" --recurse-submodules |
            __HELLSCRIPTS_WRITE_LOGS
        )

        if [[ ! -d "$__HELLSCRIPTS_REPO_PATH" ]]
        then
            __HELLSCRIPTS_INSTALLER_EPIC_FAILED=true
        fi
    }

    function __HELLSCRIPTS_OPEN_EDITOR {
        __HELLSCRIPTS_SET_AT_EXIT_TRAP "unset __HELLSCRIPTS_EDITOR_FILES &> /dev/null"
        if [[ $# -eq 0 ]]
        then
            __HELLSCRIPTS_EDITOR_FILES=""
        else
            __HELLSCRIPTS_EDITOR_FILES="$@"
        fi

        "$EDITOR" "$__HELLSCRIPTS_EDITOR_FILES"  ||
        vim "$__HELLSCRIPTS_EDITOR_FILES"        ||
        emacs "$__HELLSCRIPTS_EDITOR_FILES"      ||
        vifm "$__HELLSCRIPTS_EDITOR_FILES"       ||
        nano "$__HELLSCRIPTS_EDITOR_FILES"       ||
        vi "$__HELLSCRIPTS_EDITOR_FILES"         ||
        ne "$__HELLSCRIPTS_EDITOR_FILES"         ||
        __HELLSCRIPTS_SETUP_LOGGER "Can't open any editor, configure your EDITOR environment variable."  &&
        return 1
    }

    function __HELLSCRIPTS_EDIT_ZSHRC {
        touch "$__HELLSCRIPTS_ZSHRC_FILEPATH"
        if [[ ! $(cat "$__HELLSCRIPTS_ZSHRC_FILEPATH" &>/dev/null | grep "HELLSCRIPTS") ]]
        then
            __HELLSCRIPTS_SETUP_LOGGER "No mention of \"HELLSCRIPTS\" found in your .zshrc.\nInjecting..."
            (
                echo "# . \"$__HELLSCRIPTS_FOLDER/.zsh_hellmap\" # * ... This goes at the top of your .zshrc file! # [HELL_CONFIG_LINE]"
                echo
                echo "# if \"\$__HELLSCRIPTS_ATTR[ENABLE_MANJARO_ZSH_PROMPT_STYLE]\" # [HELL_CONFIG_LINE]"
                echo "# then # [HELL_CONFIG_LINE]"
                echo "#     if [[ -e /usr/share/zsh/manjaro-zsh-prompt ]] # [HELL_CONFIG_LINE]"
                echo "#     then # [HELL_CONFIG_LINE]"
                echo "#         . /usr/share/zsh/manjaro-zsh-prompt # [HELL_CONFIG_LINE]"
                echo "#     fi # [HELL_CONFIG_LINE]"
                echo "# fi # [HELL_CONFIG_LINE]"
                echo -ne "\n"
                echo "# if \"\$__HELLSCRIPTS_ATTR[ENABLE_MANJARO_ZSH_PROMPT_CONFIG]\" # [HELL_CONFIG_LINE]"
                echo "# then # [HELL_CONFIG_LINE]"
                echo "#     USE_POWERLINE=\"true\" # [HELL_CONFIG_LINE]"
                echo "#     if [[ -e /usr/share/zsh/manjaro-zsh-config ]] # [HELL_CONFIG_LINE]"
                echo "#     then # [HELL_CONFIG_LINE]"
                echo "#         . /usr/share/zsh/manjaro-zsh-config # [HELL_CONFIG_LINE]"
                echo "#     fi # [HELL_CONFIG_LINE]"
                echo "# fi # [HELL_CONFIG_LINE]"
                echo
                echo "# if \"\$__HELLSCRIPTS_ATTR[HELL_MODE]\" # [HELL_CONFIG_LINE]"
                echo "# then # [HELL_CONFIG_LINE]"
                echo "#     echo \"HellScripts startup logs available at -> \$__HELLSCRIPTS_LOG_FILE\" # [HELL_CONFIG_LINE]"
                echo "#    . \"\$__HELLSCRIPTS_ATTR[SETUP_FILEPATH]\" \"doINSTALL\" # [HELL_CONFIG_LINE]"
                echo "# fi # [HELL_CONFIG_LINE]"
            ) >> "$__HELLSCRIPTS_ZSHRC_FILEPATH"
            __HELLSCRIPTS_OPEN_EDITOR "$__HELLSCRIPTS_ZSHRC_FILEPATH"
        else
            sed '/HELL_CONFIG_LINE/ s/^#\ //' -i "$__HELLSCRIPTS_ZSHRC_FILEPATH"
            if $__HELLSCRIPTS_REINSTALLING
            then
                __HELLSCRIPTS_OPEN_EDITOR "$__HELLSCRIPTS_ZSHRC_FILEPATH"
            fi
        fi
    }

    function __HELLSCRIPTS_REGENERATE_HELLMAP {
        __HELLSCRIPTS_SETUP_LOGGER "Building Hellmap anew, reseting your crappy config."
        __HELLSCRIPTS_CREATE_ROOT_DIRECTORY
        rm -f "$__HELLSCRIPTS_HELLMAP_FILEPATH"
        (
            echo "#!/usr/bin/env zsh"
            echo
            echo "set -a"
            echo "__HELLSCRIPTS_REPO_PATH=\"$__HELLSCRIPTS_REPO_PATH\""
            echo "declare -Ax __HELLSCRIPTS_ATTR=("
            echo "    [\"HELL_MODE\"]=true"
            echo "    [\"ENABLE_MANJARO_ZSH_PROMPT_STYLE\"]=false"
            echo "    [\"ENABLE_MANJARO_ZSH_PROMPT_CONFIG\"]=true"
            echo "    [\"ENABLE_HELLSCRIPTS_UPDATE_ON_SHELL_POP\"]=true"
            echo "    [\"ENABLE_HELLSCRIPTS_MACKUP_BACKUP_ON_SHELL_POP\"]=true"
            echo "    [\"ENABLE_HELLSCRIPTS_LOGGING\"]=true"
            echo "    [\"ENABLE_HELLSCRIPTS_LOGGER_PROPAGATION\"]=true"
            echo "    [\"ENABLE_SPLASHSCREEN_ON_SHELL_POP\"]=true"
            echo "    [\"MY_REMOTE_REPO_URI\"]=\"git@github.com:LeBlancLapin/MyHellScripts.git\""
            echo "    [\"MY_MACKUP_REMOTE_REPO_URI\"]=\"git@github.com:LeBlancLapin/Mackup.git\""
            echo "    [\"PREZTO_REMOTE_REPO_URI\"]=\"https://github.com/sorin-ionescu/prezto.git\""
            echo "    [\"REMOTE_GETPKG_SCRIPT_URI\"]=\"https://raw.githubusercontent.com/LeBlancLapin/hell-pkg/main/hell-getpkg\""
            echo "    [\"REPO_DIR\"]=\"$__HELLSCRIPTS_REPO_PATH\""
            echo "    [\"MACKUP_REPO_DIR\"]=\"$HOME/.config/mackup_backup/Mackup\""
            echo "    [\"PREZTO_REPO_DIR\"]=\"${ZDOTDIR:-$HOME}/.zprezto\""
            echo "    [\"SETUP_FILEPATH\"]=\"$__HELLSCRIPTS_REPO_PATH/sHell/hell-installer\""
            echo "    [\"MACKUP_CONFIG_FILEPATH\"]=\"~/.mackup.cfg\""
            echo "    [\"MEMO_RUNTIME_ERROR\"]=false"
            echo ")"
            echo "set +a"
        ) >> "$__HELLSCRIPTS_HELLMAP_FILEPATH"

        __HELLSCRIPTS_OPEN_EDITOR "$__HELLSCRIPTS_HELLMAP_FILEPATH"
        __HELLSCRIPTS_EDIT_ZSHRC
    }

    function __HELLSCRIPTS_UNINSTALL {
        [[ ! -f "$__HELLSCRIPTS_HELLMAP_FILEPATH" ]] && __HELLSCRIPTS_REGENERATE_HELLMAP
        . "$__HELLSCRIPTS_HELLMAP_FILEPATH"
        rm -rf "$__HELLSCRIPTS_ATTR[MY_REMOTE_REPO_URI]"
        rm -f "$__HELLSCRIPTS_HELLMAP_FILEPATH"
        sed 's/^.*\bHELL_CONFIG_LINE\b.*$/#\ &/' -i "$__HELLSCRIPTS_ZSHRC_FILEPATH"
        rm -rf "$__HELLSCRIPTS_FOLDER"
    }

    function __HELLSCRIPTS_WRITE_LOGS {
        __HELLSCRIPTS_SET_AT_EXIT_TRAP "unset __HELLSCRIPTS_LOGGER_CURRENT_FILE &> /dev/null"
        __HELLSCRIPTS_LOGGER_CURRENT_FILE=""

        if [[ $# -ne 0 ]]; then __HELLSCRIPTS_LOGGER_CURRENT_FILE="$1"; fi
        if [[ $# -gt 1 ]]; then return 7; fi
        if [[ ! -f "$__HELLSCRIPTS_LOG_FILE" && ! -f "$__HELLSCRIPTS_LOGGER_CURRENT_FILE" ]]; then return 2; fi
        if [[ -z "$__HELLSCRIPTS_LOGGER_CURRENT_FILE" ]]; then __HELLSCRIPTS_LOGGER_CURRENT_FILE="$__HELLSCRIPTS_LOG_FILE"; fi

        read line
        if [[ $line ]]
        then
            echo -e $(date) >> "$__HELLSCRIPTS_LOGGER_CURRENT_FILE"
            2>&1 echo -ne "$line" >> "$__HELLSCRIPTS_LOGGER_CURRENT_FILE"
            while read l
            do
                2>&1 echo -ne "$line" >> "$__HELLSCRIPTS_LOGGER_CURRENT_FILE"
            done
        fi
        echo -e "\n" >> "$__HELLSCRIPTS_LOGGER_CURRENT_FILE"
    }

    function __HELLSCRIPTS_DROP_LOGGER {
        type __HELLSCRIPTS_LOGGER &> /dev/null        && unset -f -- __HELLSCRIPTS_LOGGER
        type __HELLSCRIPTS_ERROR_LOGGER &> /dev/null  && unset -f -- __HELLSCRIPTS_ERROR_LOGGER
    }

    __HELLSCRIPTS_DROP_LOGGER
    function __HELLSCRIPTS_LOGGER {
        if $__HELLSCRIPTS_ATTR[ENABLE_HELLSCRIPTS_LOGGING]
        then
            2>&1 echo -e "[HellScripts] $@" | __HELLSCRIPTS_WRITE_LOGS
        fi
    }

    function __HELLSCRIPTS_ERROR_LOGGER {
        if $__HELLSCRIPTS_ATTR[ENABLE_HELLSCRIPTS_LOGGING]
        then
            >&2 echo -e "[HellScripts ERROR] $@" 2>&1 | __HELLSCRIPTS_WRITE_LOGS
        fi
    }

    if ! $__HELLSCRIPTS_ATTR[ENABLE_HELLSCRIPTS_LOGGING]
    then
        __HELLSCRIPTS_DROP_LOGGER
        function __HELLSCRIPTS_LOGGER {}
        function __HELLSCRIPTS_ERROR_LOGGER {}
    fi

    function __HELLSCRIPTS_IS_COMMAND_IMPORTED {
        if [[ $# -eq 0 ]]
        then
            __HELLSCRIPTS_ERROR_LOGGER "__HELLSCRIPTS_IS_COMMAND_IMPORTED: wrong number of arguments (expected 1, got 0)"
            return 7
        fi

        for cmd in $@
        do
            if ! command -v "$cmd" &> /dev/null; then return false; fi
        done

        true
    }

    function __HELLSCRIPTS_SETUP_APPEND_DEPENDENCY {
        if [[ $# -eq 0 ]]
        then
            __HELLSCRIPTS_ERROR_LOGGER "__HELLSCRIPTS_SETUP_APPEND_DEPENDENCY: wrong number of arguments (expected 1, got 0)"
            return 1
        fi

        for pkg in $@
        do
            if ! __HELLSCRIPTS_IS_COMMAND_IMPORTED "$pkg"; then __HELLSCRIPTS_LOGGER "Installing $pkg..." && __HELLSCRIPTS_REMOTE_EXECUTION "$__HELLSCRIPTS_ATTR[REMOTE_GETPKG_SCRIPT_URI]" "$pkg"; fi
        done
    }

    function __HELLSCRIPTS_REMOTE_EXECUTION {
        if [[ $# -eq 0 ]]
        then
            __HELLSCRIPTS_ERROR_LOGGER "__HELLSCRIPTS_REMOTE_EXECUTION: wrong number of arguments (expected 1, got 0)"
            return 7
        fi
        (
            bash <(curl -Ls "$1") "${@: 2}"    ||
            bash <(wget -qO- "$1") "${@: 2}"   ||
            bash <(lynx -dump "$1") "${@: 2}"  ||
            __HELLSCRIPTS_ERROR_LOGGER "Failed to run command!\nRemote URI: $1\nArguments: ${@: 2}"
        ) | __HELLSCRIPTS_WRITE_LOGS
    }

    function __HELLSCRIPTS_FETCH_PATHES {
        __HELLSCRIPTS_SET_AT_EXIT_TRAP "unset __HELLSCRIPTS_DIRS &> /dev/null"
        __HELLSCRIPTS_DIRS=$(find $__HELLSCRIPTS_ATTR[REPO_DIR] -type d -not -path "$__HELLSCRIPTS_ATTR[REPO_DIR]/.git*")
        echo "${__HELLSCRIPTS_DIRS//[$'\t\r\n']/:}:$HOME/.emacs.d/bin"
    }

    function __HELLSCRIPTS_INJECT_PATHES {
        __HELLSCRIPTS_SET_AT_EXIT_TRAP "unset __HELLSCRIPTS_NEW_PATH_ELM &> /dev/null"
        __HELLSCRIPTS_NEW_PATH_ELM=$(eval __HELLSCRIPTS_FETCH_PATHES)
        PATH="$PATH:$__HELLSCRIPTS_NEW_PATH_ELM"
        __HELLSCRIPTS_LOGGER "Updated PATH with values:\n" \
                             "$__HELLSCRIPTS_NEW_PATH_ELM"
    }

    function __DISPLAY_HELLSCRIPTS_LOGS {
        cat "$__HELLSCRIPTS_LOG_FILE" # * ... ToDo: fixer cette merde + Ne pas générer deux logfiles différents -_-
    }
}

function __HELLSCRIPTS_RUN_INSTALLER {
    __HELLSCRIPTS_INJECT_FUNS
    __HELLSCRIPTS_SETUP_LOGGER "Injected HellScripts core functions..."

    __HELLSCRIPTS_SETUP_LOGGER "Initializing Setup..."
    if [[ ! -f "$__HELLSCRIPTS_HELLMAP_FILEPATH" ]]; then __HELLSCRIPTS_REGENERATE_HELLMAP; fi

    __HELLSCRIPTS_SETUP_LOGGER "Sourcing HellMap... -> $__HELLSCRIPTS_HELLMAP_FILEPATH"
    . "$__HELLSCRIPTS_HELLMAP_FILEPATH"

    __HELLSCRIPTS_SETUP_APPEND_DEPENDENCY "git" "zsh" "curl" "awk"
    __HELLSCRIPTS_SETUP_LOGGER "Checking if you have imported HellScripts Repo..."
    if [[ ! -d "$__HELLSCRIPTS_ATTR[REPO_DIR]" ]]; then __HELLSCRIPTS_CLONE_REPO; fi
    cd -P $__HELLSCRIPTS_REPO_PATH  &&
    (
        2>&1 git submodule update --remote | __HELLSCRIPTS_WRITE_LOGS
    )

    __HELLSCRIPTS_SET_ZSH_AS_DEFAULT_SHELL
    __HELLSCRIPTS_INJECT_PATHES

    if $__HELLSCRIPTS_INSTALLER_EPIC_FAILED
    then
        __HELLSCRIPTS_ERROR_LOGGER "\nWell tried, wkwkwk.\n" \
        "Are you aware this is just a gitmodule which I made public,\n" \
        "only an artefact from a several dozens of thousands lines of code project?\n" \
        "I love u qt." && unset __HELLSCRIPTS_INSTALLER_EPIC_FAILED && return 1
    fi
    unset __HELLSCRIPTS_INSTALLER_EPIC_FAILED
    . .propagate_hell_zshmess
}

__HELLSCRIPTS_INJECT_FUNS
if [[ $# -eq 0 ]]
then
    return
else
    if [[ "$1" == "doINSTALL" ]]
    then
        __HELLSCRIPTS_RUN_INSTALLER
    fi

    if [[ "$1" == "doUNINSTALL" ]]
    then
        __HELLSCRIPTS_UNINSTALL
    fi

    if [[ "$1" == "doREINSTALL" ]]
    then
        __HELLSCRIPTS_REINSTALLING=true
        __HELLSCRIPTS_UNINSTALL
        __HELLSCRIPTS_RUN_INSTALLER
    fi
fi
